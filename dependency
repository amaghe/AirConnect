#!/bin/bash

#Variables
needs_configuration=false
base_directory=$PWD
lib_directory=$base_directory/lib
source_directory=$base_directory/..

#
# TODO: Description
#
function downloadAndExtract() {
    local url=$1
    local filename=$2

    if [ -x "$(which wget)" ] ; then
        wget -q $url -O $filename
    elif [ -x "$(which curl)" ]; then
        curl -o $filename -sfL $url
    else
        echo "Could not find curl or wget, please install one." >&2
    fi

	if [[ $filename =~ \.zip$ ]]
	then
		unzip -qq $filename -d $source_directory
		rm $filename
	elif [[ $filename =~ \.xz$ ]]
	then
		cd $source_directory
		tar -xz $filename
		#filename=${filename%.xz} # Remove .xz from filename
		#tar xopf $filename
		rm $filename
	fi
}

#
# TODO: Description
#
function downloadProject() {
	local projecturl=$1
	local filename=$2
	local foldername=$3
	 #By default no configuration is needed, because the project could be their
	needs_configuration=false

	echo ""
	echo "Check: Dependency $foldername"

	if [ -d "$source_directory/$foldername" ]
	then
		echo "- found"
	else
		echo "- try to download"

		#git checkout vs. normal download
		if [[ $projecturl =~ \.git$ ]]
        then
			git clone --quiet --depth=1 $projecturl $source_directory/$foldername 2>&1 >/dev/null
		else
			downloadAndExtract $projecturl $source_directory/$filename
    	fi

		# Check if download was succesfull
		if [ -d "$source_directory/$foldername" ]
		then
			echo "- download successfull"
			needs_configuration=true
		else
			echo "- download failed"
		fi
	fi
}

#
# TODO: Description
#
function copyLib() {
	local projectname=$1
	local libraryname=$2
	
	echo ""
	echo "Check: $libraryname"

	if [ ! -d "$base_directory/lib" ]
		then
			mkdir $base_directory/lib
	fi

	if [ ! -f "$lib_directory/$libraryname" ]
	then
		echo "- Did not find $libraryname in $lib_directory"
		echo "- Try to copy $libraryname from $source_directory/$projectname into $lib_directory"

		find $source_directory/$projectname/ -name "$libraryname" -execdir cp {} $lib_directory/ \;
		if [ -f "$lib_directory/$libraryname" ]
		then
			echo "- installation successfull"
		else
			echo "- Did not find $libraryname. You have to check your installation"
		fi
	fi
} 


#
# Main
#########################################
#

#
# Download easy dependencies
#
downloadProject https://github.com/philippe44/mDNS-SD.git mDNS-SD mDNS-SD 
downloadProject  https://github.com/philippe44/TinySVCmDNS.git TinySVCmDNS TinySVCmDNS
downloadProject  https://github.com/macosforge/alac.git alac alac
downloadProject  https://github.com/svn2github/valgrind.git valgrind valgrind
downloadProject https://github.com/mattstevens/dmap-parser.git dmap-parser dmap-parser
#Seems to be compiled with 0.3.4, so this version is hardcoded, instead of newest version 0.4.2
downloadProject https://github.com/nanopb/nanopb/archive/nanopb-0.3.4.zip nanopb-nanopb-0.3.4.zip nanopb-nanopb-0.3.4



downloadProject https://github.com/toots/shine.git shine shine
if [ "$needs_configuration" = "true" ]
then
	echo "- configuration and compile ..."
	cd $source_directory/shine
	autoreconf -fi  >& /dev/null
	./configure     >& /dev/null
	make            >& /dev/null

	copyLib "shine" "libshine.a"
fi


downloadProject https://github.com/pupnp/pupnp/archive/release-1.6.19.zip release-1.6.19.zip pupnp-release-1.6.19
if [ "$needs_configuration" = "true" ]
then
	echo "- configuration and compile ..."
	cd $source_directory/pupnp-release-1.6.19
	autoreconf -fi  >& /dev/null
	./configure     >& /dev/null
	make            >& /dev/null

	copyLib "pupnp-release-1.6.19" "libixml.a"
fi


#On Macos brew install autoconf automake libtool is required
downloadProject https://github.com/akheron/jansson.git jansson jansson
if [ "$needs_configuration" = "true" ]
then
	echo "- configuration  ..."
	cd $source_directory/jansson
	autoreconf -fi  >& /dev/null
	./configure     >& /dev/null

	#FIXME workaound because of wrong include path in JANSSON_PRIVATE_H
	cp $source_directory/jansson/jansson_private_config.h $source_directory/jansson/src
fi


downloadProject https://ftp.osuosl.org/pub/xiph/releases/flac/flac-1.3.3.tar.xz flac-1.3.3.tar.xz flac-1.3.3
if [ "$needs_configuration" = "true" ]
then
	echo "- configuration and compile ..."
	cd $source_directory/flac-1.3.3
	./configure  >& /dev/null
	make         >& /dev/null

	copyLib "flac-1.3.3" "libFLAC-static.a"
fi


#Seems to be compiled with 1.0.2#, so this version is hardcoded, instead of newest version 3.0.0
downloadProject https://github.com/openssl/openssl/archive/OpenSSL_1_0_2u.zip OpenSSL_1_0_2u.zip openssl-OpenSSL_1_0_2u
if [ "$needs_configuration" = "true" ]
then
	echo "- configuration and compile ..."

	platform=
	if [[ "$OSTYPE" == "linux-gnu"* ]]; then
   		platform=linux-generic64
	elif [[ "$OSTYPE" == "darwin"* ]]; then
   		platform=darwin64-x86_64-cc
	fi

	cd $source_directory/openssl-OpenSSL_1_0_2u
	./Configure $platform  >& /dev/null
	make                   >& /dev/null

	copyLib "openssl-OpenSSL_1_0_2u" "libcrypto.a"
	copyLib "openssl-OpenSSL_1_0_2u" "libssl.a"
fi
